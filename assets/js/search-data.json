{"0": {
    "doc": "About",
    "title": "MPSEDC DOCS",
    "content": " ",
    "url": "/about/#mpsedc-docs",
    
    "relUrl": "/about/#mpsedc-docs"
  },"1": {
    "doc": "About",
    "title": "About",
    "content": " ",
    "url": "/about/",
    
    "relUrl": "/about/"
  },"2": {
    "doc": "Documentation",
    "title": "Frappe Bench — Documentation",
    "content": "Welcome! Explore the complete guide step by step: . ",
    "url": "/docs/#frappe-bench--documentation",
    
    "relUrl": "/docs/#frappe-bench--documentation"
  },"3": {
    "doc": "Documentation",
    "title": "Getting Started",
    "content": ". | Installation | . ",
    "url": "/docs/#getting-started",
    
    "relUrl": "/docs/#getting-started"
  },"4": {
    "doc": "Documentation",
    "title": "Development",
    "content": ". | Creating a Custom Frappe App | Installing Apps | Creating a New Site | . ",
    "url": "/docs/#development",
    
    "relUrl": "/docs/#development"
  },"5": {
    "doc": "Documentation",
    "title": "Usage",
    "content": ". | Using Bench Console | . ",
    "url": "/docs/#usage",
    
    "relUrl": "/docs/#usage"
  },"6": {
    "doc": "Documentation",
    "title": "Maintenance",
    "content": ". | Backing Up Data | Restoring Database | . ",
    "url": "/docs/#maintenance",
    
    "relUrl": "/docs/#maintenance"
  },"7": {
    "doc": "Documentation",
    "title": "Deployment",
    "content": ". | Nginx Reverse Proxy Setup | . ",
    "url": "/docs/#deployment",
    
    "relUrl": "/docs/#deployment"
  },"8": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": " ",
    "url": "/docs/",
    
    "relUrl": "/docs/"
  },"9": {
    "doc": "Frappe-Bench Complete Guide for Ubuntu",
    "title": "Frappe-Bench Complete Guide for Ubuntu",
    "content": "# Frappe-Bench Complete Guide for Ubuntu ## Table of Contents 1. [Installation](#installation) 2. [Creating a Custom Frappe App](#creating-a-custom-frappe-app) 3. [Installing Apps](#installing-apps) 4. [Creating a New Site](#creating-a-new-site) 5. [Using Bench Console](#using-bench-console) 6. [Backing Up Data/Database](#backing-up-datadatabase) 7. [Restoring Database](#restoring-database) ## Installation ### Prerequisites First, update your Ubuntu system: ```bash sudo apt update && sudo apt upgrade -y ``` Install required dependencies: ```bash # Install Python and development tools sudo apt install -y python3-dev python3-pip python3-venv sudo apt install -y software-properties-common # Install Node.js and npm curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt install -y nodejs # Install yarn npm install -g yarn # Install Git sudo apt install -y git # Install other dependencies sudo apt install -y build-essential libssl-dev libffi-dev sudo apt install -y python3-setuptools python3-wheel sudo apt install -y redis-server sudo apt install -y mariadb-server mariadb-client ``` ### Install Bench Install bench using pip: ```bash pip3 install frappe-bench ``` Add the local bin directory to PATH (add this to your ~/.bashrc or ~/.zshrc): ```bash export PATH=$PATH:~/.local/bin ``` Reload your shell or run: ```bash source ~/.bashrc ``` ### Configure MariaDB Secure MariaDB installation: ```bash sudo mysql_secure_installation ``` Configure MariaDB for Frappe: ```bash sudo mysql -u root -p ``` In the MySQL prompt: ```sql CREATE USER 'frappe'@'localhost' IDENTIFIED BY 'your_password'; GRANT ALL PRIVILEGES ON *.* TO 'frappe'@'localhost' WITH GRANT OPTION; FLUSH PRIVILEGES; EXIT; ``` Edit MariaDB configuration: ```bash sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf ``` Add these lines under `[mysqld]`: ```ini character-set-client-handshake = FALSE character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci ``` Restart MariaDB: ```bash sudo systemctl restart mariadb ``` ### Initialize Bench Create a new bench directory: ```bash bench init frappe-bench --frappe-branch version-15 cd frappe-bench ``` ## Creating a Custom Frappe App ### Generate App Structure Create a new custom app: ```bash bench new-app your_app_name ``` This will prompt you for: - App Title - App Description - App Publisher - App Email - App License - App Icon Example: ```bash bench new-app custom_inventory # Follow the prompts with your app details ``` ### App Structure Your new app will be created in `apps/your_app_name/` with this structure: ``` your_app_name/ ├── your_app_name/ │ ├── __init__.py │ ├── hooks.py │ ├── modules.txt │ └── your_app_name/ ├── setup.py ├── requirements.txt └── README.md ``` ### Customize Your App Edit the hooks.py file to customize your app: ```python # apps/your_app_name/your_app_name/hooks.py from . import __version__ as app_version app_name = \"your_app_name\" app_title = \"Your App Name\" app_publisher = \"Your Company\" app_description = \"Your app description\" app_icon = \"octicon octicon-file-directory\" app_color = \"grey\" app_email = \"your_email@company.com\" app_license = \"MIT\" # Include js, css files in header of desk.html # app_include_css = \"/assets/your_app_name/css/your_app_name.css\" # app_include_js = \"/assets/your_app_name/js/your_app_name.js\" ``` ## Installing Apps ### Install App to Bench First, install the app to your bench: ```bash bench get-app https://github.com/username/app_name.git # Or for local apps: bench install-app your_app_name ``` ### Install App to Site Install the app to a specific site: ```bash bench --site site_name install-app app_name ``` Example: ```bash bench --site mysite.local install-app custom_inventory ``` ### List Available Apps See all available apps in your bench: ```bash bench list-apps ``` ## Creating a New Site ### Create Site Create a new site with database: ```bash bench new-site site_name --db-name database_name ``` Example: ```bash bench new-site mysite.local --db-name mysite_db ``` You'll be prompted to set an administrator password. ### Set Site as Current Set the newly created site as the current site: ```bash bench use site_name ``` ### Install ERPNext (Optional) If you want to install ERPNext: ```bash bench get-app erpnext --branch version-15 bench --site site_name install-app erpnext ``` ### Start Development Server Start the development server: ```bash bench start ``` Access your site at `http://site_name:8000` ## Using Bench Console ### Enter Console Access the bench console for interactive Python/Frappe operations: ```bash bench --site site_name console ``` ### Common Console Operations #### Import Frappe ```python import frappe ``` #### Create a Document ```python # Create a new document doc = frappe.get_doc({ \"doctype\": \"User\", \"email\": \"newuser@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\" }) doc.insert() frappe.db.commit() ``` #### Query Database ```python # Get a document user = frappe.get_doc(\"User\", \"administrator\") print(user.full_name) # Get list of documents users = frappe.get_all(\"User\", fields=[\"name\", \"email\", \"full_name\"]) print(users) # SQL query result = frappe.db.sql(\"SELECT * FROM tabUser LIMIT 5\", as_dict=True) print(result) ``` #### Run Methods ```python # Run a document method doc = frappe.get_doc(\"User\", \"administrator\") doc.some_method() # Run server scripts frappe.utils.execute_in_shell(\"ls -la\") ``` #### Clear Cache ```python frappe.clear_cache() ``` ### Exit Console ```python exit() ``` ## Backing Up Data/Database ### Automatic Backup Enable automatic backups: ```bash bench --site site_name set-config backup_frequency \"Daily\" bench --site site_name set-config backup_limit 3 ``` ### Manual Database Backup Create a manual backup: ```bash bench --site site_name backup ``` This creates backups in `sites/site_name/private/backups/` ### Backup with Files Include uploaded files in backup: ```bash bench --site site_name backup --with-files ``` ### Custom Backup Location Specify backup location: ```bash bench --site site_name backup --backup-path /path/to/backup/location ``` ### Database-Only Backup For database-only backup: ```bash bench --site site_name backup --only-database ``` ### List Backups View available backups: ```bash ls sites/site_name/private/backups/ ``` ## Restoring Database ### Restore from Backup Restore a site from backup: ```bash bench --site site_name restore /path/to/backup.sql.gz ``` ### Restore with Files If you backed up with files: ```bash bench --site site_name restore /path/to/backup.sql.gz --with-private-files /path/to/private-files.tar --with-public-files /path/to/public-files.tar ``` ### Force Restore Force restore (drops existing database): ```bash bench --site site_name --force restore /path/to/backup.sql.gz ``` ### Restore to New Site Create a new site and restore: ```bash bench new-site new_site_name --source_sql /path/to/backup.sql.gz ``` ### Migrate After Restore After restoring, run migrations: ```bash bench --site site_name migrate ``` ## Additional Useful Commands ### Update Apps Update all apps: ```bash bench update ``` Update specific app: ```bash bench update --app app_name ``` ### Restart Services ```bash bench restart ``` ### View Logs ```bash bench logs ``` ### Clear Cache ```bash bench --site site_name clear-cache ``` ### Enable/Disable Maintenance Mode ```bash bench --site site_name set-maintenance-mode on bench --site site_name set-maintenance-mode off ``` ### Drop Site **Warning: This will permanently delete the site and database** ```bash bench drop-site site_name ``` ## Troubleshooting ### Common Issues 1. **Permission Issues**: Use `sudo` for system-level operations 2. **Port Already in Use**: Kill existing processes or use different ports 3. **Database Connection**: Check MariaDB credentials and service status 4. **Node/NPM Issues**: Ensure Node.js version compatibility ### Log Files Check these log files for debugging: - `logs/web.error.log` - `logs/web.log` - `logs/worker.error.log` - `logs/worker.log` ### Reset Admin Password ```bash bench --site site_name set-admin-password ``` This comprehensive guide covers all the essential aspects of working with Frappe-Bench in Ubuntu. Remember to always backup your data before making significant changes to your site or database. ",
    "url": "/frappe-bench-guide.html",
    
    "relUrl": "/frappe-bench-guide.html"
  },"10": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": "## Documentation Check out the complete [Frappe Bench Guide](/docs/). ",
    "url": "/",
    
    "relUrl": "/"
  },"11": {
    "doc": "Creating Your Own Blog with Jekyll on Manjaro i3",
    "title": "{{ page.title | escape }}",
    "content": "{{ page.date | date: \"%b %-d, %Y\" }} {% if page.author %} • {{ page.author }} {% endif %} {% if page.tags.size > 0 %} • Tags: {% for tag in page.tags %} {{ tag }} {% endfor %} {% endif %} . {{ content }} Thanks for reading! . ``` ## Deployment Options ### GitHub Pages (Free) 1. Create a GitHub repository named `username.github.io` 2. Push your Jekyll site to the repository 3. Your site will be available at `https://username.github.io` Add to `_config.yml`: ```yaml url: \"https://username.github.io\" ``` ### Netlify (Free) 1. Push your code to GitHub/GitLab 2. Connect your repository to [Netlify](https://netlify.com) 3. Set build command: `bundle exec jekyll build` 4. Set publish directory: `_site` ### Manual Server Deployment Build your site: ```bash bundle exec jekyll build ``` Upload the `_site` directory to your web server. ### i3 Deployment Script Create `~/bin/deploy-blog`: ```bash #!/bin/bash # Deploy Jekyll blog cd ~/path/to/your/blog echo \"Building site...\" bundle exec jekyll build echo \"Deploying to server...\" rsync -avz --delete _site/ user@your-server:/path/to/web/root/ echo \"Deployment complete!\" # Send i3 notification notify-send \"Blog Deployed\" \"Your Jekyll blog has been deployed successfully!\" ``` ## Troubleshooting ### Common Issues in Manjaro #### Ruby Version Issues If you encounter Ruby version conflicts: ```bash # Check Ruby version ruby --version # If needed, install rbenv for version management yay -S rbenv ruby-build # Install specific Ruby version rbenv install 3.1.0 rbenv global 3.1.0 ``` #### Bundle Install Fails Missing dependencies: ```bash sudo pacman -S ruby-bundler ruby-rdoc ``` #### Permission Issues Use `--user-install` flag: ```bash gem install --user-install jekyll bundler ``` #### Port Already in Use Change the port: ```bash bundle exec jekyll serve --port 4001 ``` #### i3 Specific: No Browser Opening Install a browser if not present: ```bash sudo pacman -S firefox # or sudo pacman -S chromium ``` Add to i3 config for quick access: ``` bindsym $mod+b exec firefox ``` ## Advanced Tips for Manjaro i3 ### Auto-reload with File Watching Use `entr` for automatic rebuilds: ```bash # Install entr sudo pacman -S entr # Auto-reload on changes find . -name \"*.md\" -o -name \"*.yml\" -o -name \"*.scss\" | entr -r bundle exec jekyll serve ``` ### i3 Workspace Setup Create a dedicated workspace for blogging. Add to `~/.config/i3/config`: ``` # Workspace for blogging set $ws_blog \"9: blog\" bindsym $mod+9 workspace $ws_blog # Auto-assign applications assign [class=\"firefox\" title=\"localhost:4000\"] $ws_blog # Quick blog workspace bindsym $mod+Shift+b workspace $ws_blog; exec terminal -e \"cd ~/my-awesome-site && bundle exec jekyll serve\"; exec firefox http://localhost:4000 ``` ### Terminal Integration Add these aliases to `~/.bashrc`: ```bash # Jekyll aliases alias jserve=\"bundle exec jekyll serve\" alias jbuild=\"bundle exec jekyll build\" alias jnew=\"jekyll new\" alias blog=\"cd ~/my-awesome-site\" # Quick post creation with current date alias newpost='~/bin/new-jekyll-post' ``` ### Backup Script Create `~/bin/backup-blog`: ```bash #!/bin/bash # Backup Jekyll blog BLOG_DIR=\"$HOME/my-awesome-site\" BACKUP_DIR=\"$HOME/backups/blog\" DATE=$(date +\"%Y%m%d_%H%M%S\") mkdir -p \"$BACKUP_DIR\" tar -czf \"$BACKUP_DIR/blog_backup_$DATE.tar.gz\" -C \"$HOME\" my-awesome-site echo \"Blog backed up to: $BACKUP_DIR/blog_backup_$DATE.tar.gz\" # Keep only last 5 backups cd \"$BACKUP_DIR\" ls -t blog_backup_*.tar.gz | tail -n +6 | xargs -r rm notify-send \"Backup Complete\" \"Blog backup created successfully\" ``` ### Live Editing Setup For a complete live-editing setup, create this i3 layout script `~/bin/blog-layout`: ```bash #!/bin/bash # Setup i3 layout for blogging # Switch to blog workspace i3-msg workspace \"9: blog\" # Open terminal with Jekyll server i3-msg exec \"terminal -e 'cd ~/my-awesome-site && bundle exec jekyll serve'\" sleep 2 # Split and open editor i3-msg split h i3-msg exec \"terminal -e 'cd ~/my-awesome-site && vim .'\" sleep 1 # Split and open browser i3-msg split v i3-msg exec \"firefox http://localhost:4000\" notify-send \"Blog Environment\" \"Jekyll blog environment is ready!\" ``` Make it executable: ```bash chmod +x ~/bin/blog-layout ``` Add a keybinding to i3 config: ``` bindsym $mod+Shift+Alt+b exec ~/bin/blog-layout ``` ## Conclusion You now have a complete Jekyll blog setup optimized for Manjaro i3! Your workflow includes: - Quick post creation scripts - Efficient i3 workspace configuration - Automated deployment options - Live-reload development environment - Backup and maintenance scripts Happy blogging! Your Jekyll site combines the power of static site generation with the efficiency of i3 window management, creating an optimal environment for technical writing and content creation. ## Additional Resources - [Jekyll Documentation](https://jekyllrb.com/docs/) - [Jekyll Themes](https://jekyllthemes.org/) - [Liquid Template Language](https://shopify.github.io/liquid/) - [Kramdown Syntax](https://kramdown.gettalong.org/syntax.html) - [i3 User's Guide](https://i3wm.org/docs/userguide.html) ",
    "url": "/jekyll-blog-manjaro-guide.html",
    
    "relUrl": "/jekyll-blog-manjaro-guide.html"
  },"12": {
    "doc": "Creating Your Own Blog with Jekyll on Manjaro i3",
    "title": "Creating Your Own Blog with Jekyll on Manjaro i3",
    "content": "# Creating Your Own Blog with Jekyll on Manjaro i3 ## Table of Contents 1. [Introduction](#introduction) 2. [Prerequisites and Installation](#prerequisites-and-installation) 3. [Creating Your First Jekyll Blog](#creating-your-first-jekyll-blog) 4. [Understanding Jekyll Structure](#understanding-jekyll-structure) 5. [Customizing Your Blog](#customizing-your-blog) 6. [Creating Posts](#creating-posts) 7. [Themes and Customization](#themes-and-customization) 8. [Deployment Options](#deployment-options) 9. [Troubleshooting](#troubleshooting) 10. [Advanced Tips for Manjaro i3](#advanced-tips-for-manjaro-i3) ## Introduction Jekyll is a static site generator that transforms your plain text into static websites and blogs. It's perfect for developers who want a simple, fast, and secure blogging platform. This guide will walk you through setting up Jekyll on Manjaro Linux with i3 window manager. ## Prerequisites and Installation ### Update Your System First, ensure your Manjaro system is up to date: ```bash sudo pacman -Syu ``` ### Install Ruby and Development Tools Jekyll is built with Ruby, so we need to install Ruby and its development tools: ```bash # Install Ruby and development tools sudo pacman -S ruby ruby-rdoc ruby-irb base-devel # Install additional dependencies sudo pacman -S gcc make ``` ### Install RubyGems Dependencies Some gems require additional system packages: ```bash sudo pacman -S libffi openssl zlib ``` ### Configure Ruby Environment Add Ruby gems bin directory to your PATH. Add this to your `~/.bashrc` or `~/.zshrc`: ```bash # Ruby gems export PATH=\"$PATH:$(ruby -e 'puts Gem.user_dir')/bin\" export GEM_HOME=\"$(ruby -e 'puts Gem.user_dir')\" ``` Reload your shell configuration: ```bash source ~/.bashrc # or source ~/.zshrc ``` ### Install Bundler and Jekyll Now install the required gems: ```bash gem install bundler jekyll ``` If you encounter permission issues, you can install gems to your user directory: ```bash gem install --user-install bundler jekyll ``` ### Verify Installation Check if Jekyll is installed correctly: ```bash jekyll --version bundler --version ``` ## Creating Your First Jekyll Blog ### Generate a New Site Create your new Jekyll blog: ```bash jekyll new my-awesome-site ``` This creates a new directory called `my-awesome-site` with all the necessary files. ### Navigate to Your Site ```bash cd my-awesome-site ``` ### Install Dependencies Install the required gems for your site: ```bash bundle install ``` ### Serve Your Site Locally Start the development server: ```bash bundle exec jekyll serve ``` Your site will be available at `http://localhost:4000` or `http://127.0.0.1:4000` ### i3 Tip: Quick Browser Launch In i3, you can quickly open your browser to view the site. Add this to your i3 config (`~/.config/i3/config`): ``` bindsym $mod+Shift+j exec firefox http://localhost:4000 ``` Then use `Super+Shift+J` to quickly open your local Jekyll site. ## Understanding Jekyll Structure Your new Jekyll site has this structure: ``` my-awesome-site/ ├── _config.yml # Site configuration ├── _posts/ # Blog posts directory │ └── 2024-01-01-welcome-to-jekyll.markdown ├── _site/ # Generated site (don't edit) ├── .jekyll-cache/ # Cache directory ├── 404.html # 404 error page ├── about.markdown # About page ├── Gemfile # Ruby dependencies ├── Gemfile.lock # Locked dependency versions └── index.markdown # Homepage ``` ### Key Files Explained - **_config.yml**: Main configuration file for your site - **_posts/**: Directory containing your blog posts - **_site/**: Generated static site (automatically created) - **Gemfile**: Specifies Ruby gem dependencies - **index.markdown**: Your site's homepage ## Customizing Your Blog ### Edit Site Configuration Open `_config.yml` in your favorite editor: ```bash # For i3 users who prefer terminal editors vim _config.yml # or nano _config.yml ``` Customize these basic settings: ```yaml title: Your Awesome Blog email: your-email@example.com description: >- # this means to ignore newlines until \"baseurl:\" Write an awesome description for your new site here. You can edit this line in _config.yml. baseurl: \"\" # the subpath of your site, e.g. /blog url: \"\" # the base hostname & protocol for your site, e.g. http://example.com twitter_username: yourusername github_username: yourusername # Build settings markdown: kramdown theme: minima plugins: - jekyll-feed # Exclude files from processing exclude: - Gemfile - Gemfile.lock - node_modules - vendor/ ``` ### Customize the About Page Edit `about.markdown`: ```markdown --- layout: page title: About permalink: /about/ --- This is your about page. Tell visitors about yourself, your blog's purpose, or anything else you'd like to share. Some ideas for your about page: - Your background and interests - Why you started this blog - Contact information - Links to your social media profiles ``` ## Creating Posts ### Post File Naming Convention Jekyll posts must follow this naming convention: ``` YEAR-MONTH-DAY-title.MARKUP ``` Example: `2024-03-15-my-first-post.markdown` ### Create Your First Post Create a new post file: ```bash touch _posts/2024-03-15-my-first-post.markdown ``` Add this content: ```markdown --- layout: post title: \"My First Blog Post\" date: 2024-03-15 10:30:00 +0100 categories: blogging tutorial tags: jekyll blog first-post --- # Welcome to My Blog! This is my first blog post using Jekyll. Here are some things I can do: ## Code Syntax Highlighting ```python def hello_world(): print(\"Hello, World!\") hello_world() ``` ## Lists ### Things I love about Jekyll: - Fast static site generation - Markdown support - Easy deployment - Great for developers ## Links and Images Check out [Jekyll's documentation](https://jekyllrb.com/docs/). ![Jekyll Logo](https://jekyllrb.com/img/logo-2x.png) ## Mathematical Expressions (with MathJax) You can add math: $E = mc^2$ That's it for my first post! ``` ### Post Front Matter Options The front matter (between `---`) can include: ```yaml --- layout: post # Layout to use title: \"Your Post Title\" # Post title date: 2024-03-15 10:30:00 +0100 # Publication date author: Your Name # Author name categories: [category1, category2] # Categories tags: [tag1, tag2, tag3] # Tags excerpt: \"Short description\" # Custom excerpt published: true # Set to false for drafts --- ``` ### i3 Workflow Tip: Quick Post Creation Create a script for quick post creation. Save this as `~/bin/new-jekyll-post`: ```bash #!/bin/bash # Quick Jekyll post creator if [ -z \"$1\" ]; then echo \"Usage: new-jekyll-post 'Post Title'\" exit 1 fi TITLE=\"$1\" DATE=$(date +\"%Y-%m-%d\") TIME=$(date +\"%Y-%m-%d %H:%M:%S %z\") FILENAME=\"_posts/${DATE}-$(echo \"$TITLE\" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g').markdown\" cat > \"$FILENAME\" ",
    "url": "/jekyll-blog-manjaro-guide.html",
    
    "relUrl": "/jekyll-blog-manjaro-guide.html"
  }
}
